{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Ben Corter's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes and assignments.</p>"},{"location":"tutorials/go-setup/","title":"Tutorial : Setting up a Dev Container for Go","text":"<ul> <li>Primary author: Benjamin Corter</li> <li>Reviewer: Reece Corter</li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>First off, ensure you have the following installed on your machine:</p> <ul> <li>Docker</li> <li>VS Code</li> <li>Dev Containers extension for VS Code</li> <li>Git</li> </ul>"},{"location":"tutorials/go-setup/#step-by-step-instructions","title":"Step-by-step Instructions","text":"<ol> <li>Create a Blank Directory and Initialize Git<ul> <li>Open your terminal and go to the location you want your project to be</li> <li>Create a new directory for the project <pre><code>mkdir go-devcontainer\ncd go-devcontainer\n</code></pre></li> <li>Initialize a new Git Repository <pre><code>git init\n</code></pre></li> </ul> </li> <li>Set up the Dev Container<ul> <li>Create a \".devcontainer\" directory in your project directory <pre><code>mkdir .devcontainer\ncd .devcontainer\n</code></pre></li> <li>Create a \"devcontainer.json\" file in your \".devcontainer\" directory and add the following to it:  <pre><code>{\n\"name\": \"Go Dev Container\",\n\"image\": \"mcr.microsoft.com/devcontainers/go:1.20\",\n\"customizations\":  {\n    \"vscode\": {\n        \"extensions\": [\n            \"golang.go\"\n        ]\n    }\n},\n\"postCreateCommand\": \"go mod init example.com/go-devcontainer\"\n}\n</code></pre></li> </ul> <p>Info</p> <ul> <li>\"name\" is the name of the container</li> <li>\"image\" is the base container image for developement in Go</li> <li>\"customizations\"-\"vscode\"-\"extensions\" installs the Go extension for VS Code in you container</li> <li>\"postCreateCommand\" initializes a Go module as soon as the container is made, and this module is how all of the dependencies are managed</li> </ul> <ul> <li>Return to the root of your project <pre><code>cd ..\n</code></pre></li> </ul> </li> <li>Open the project in your new Dev Container<ul> <li>In the terminal, run: <pre><code>code .\n</code></pre></li> <li>VS Code will then prompt you to reopen the project in the Dev Container<ul> <li>Select \"Reopen in Container\"</li> </ul> </li> <li>After Opening the Container, verify the Go version you are using <pre><code>go version\n</code></pre></li> </ul> </li> <li>Write the \"Hello Comp423\" Program<ul> <li>In the Dev Container, create a new file named \"main.go\" <pre><code>touch main.go\n</code></pre></li> <li>Open \"main.go\" and implement the following program: <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello Comp423\")\n}\n</code></pre></li> </ul> </li> <li> <p>Compile the Program     <pre><code>go build -o hello-comp423 -buildvcs=false\n</code></pre></p> <p>Note</p> <p>When working through this tutorial to ensure its effectiveness, I initially did not have the \"-buildvcs=false\" and an error was thrown, and the terminal told me to add this, and it worked. I'm not entirely sure as to why, but I believe it has something to do with the Version Control System.</p> </li> <li> <p>Run the Program     <pre><code>./hello-comp423\n</code></pre></p> <p>Tip</p> <p>You could also use the command: <pre><code>run main.go\n</code></pre> The key difference here is that the \"build\" command outputs an executable file with the name after the -o flag, while the \"run\" command simply compiles and runs the program all together</p> </li> </ol> <p>You have now successfully created a dev container and made a simple project in the Go programming language!</p>"}]}